C:\Users\vinomoha

git username : vinot477
pass : Appu@477jan

https://start.spring.io

https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-build-systems.html#using-boot-starter 

https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html 

https://howtodoinjava.com/spring-boot/spring-soap-client-webservicetemplate/

https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#howto-create-a-deployable-war-file 

https://stackoverflow.com/questions/23661492/implement-logout-functionality-in-spring-boot   ->login/logout

https://dzone.com/articles/securing-rest-services-with-oauth2-in-springboot-1

https://anypoint.mulesoft.com/login/signup -mulesoft login
https://anypoint.mulesoft.com/designcenter/designer-amf/#/project/cc18d05d-b97d-43c5-8143-75d45c6e3a8d

user vinoth477 pass:Appu@477jan

https://raml.org/developers/raml-100-tutorial#enter-uri-parameters -->RAML

https://pivotal.io/platform/pcf-tutorials/getting-started-with-pivotal-cloud-foundry/install-the-cf-cli -to download CF CLI

https://account.run.pivotal.io/z/uaa/sign-up  -To sign up with PCF

https://docs.pivotal.io/tiledev/2-3/user-provided.html 

https://docs.cloudfoundry.org/devguide/services/user-provided.html 

https://docs.pivotal.io/pivotalcf/2-1/devguide/deploy-apps/manifest.html 

http://theblasfrompas.blogspot.com/2017/03/run-spring-cloud-task-from-pivotal.html -->tasks

https://docs.pivotal.io/tiledev/2-2/service-brokers.html 
https://docs.cloudfoundry.org/services/managing-service-brokers.html -->service-brokers

https://docs.pivotal.io/pivotalcf/2-0/services/route-services.html ->route services


============================================================================================================
11/02/19
workspace-sts_q
----------------------------------------------------------------
@EnableAutoConfiguration : automatically configures your Spring application based on the JAR dependencies you added in the project
@ComponentScan : Scans all the component in the project
@SpringBootApplication is equal to @EnableAutoConfiguration, ComponentScan
application.properties
set port server.port=8082 to override port
application-dev.properties(Run Config->Environment->Profile->give dev to override)

application.yml and application.properties used for same functionality,both uses key value pair

@Value("${message}") to take the value from application.properties


chnages made in application.properties need not be build , just stop and start

Use OF MAIN METHOD in Spring : There is a main method in our java which was responsible for initializing the spring application context.
=============================================================================================================
@ConfigurationProperties(prefix="person") to take the value of pojo variable from application.properties


@Component
@ConfigurationProperties(prefix="person")
public class PersonProperties {
    private String greeting;
    private String farewell;
    public String getFarewell() {
        return farewell;
    }
    public void setFarewell(String farewell) {
     this.farewell = farewell;
     }
    public String getGreeting() {
        return greeting;
    }
    public void setGreeting(String greeting) {
        this.greeting = greeting;
    }
} 

application.properties
person.name=Vinoth,
person.farewell=Goodbye, 
==============================================================================================================================================================================


12/2/19
dev tools:automatically restart after doing changes

Rest and SOAP based webservices

SOAP:
top-down-->SOAP ---->(xsd->wsdl->java)
bootom-down--->java to xsd

jars reqd :

https://howtodoinjava.com/spring-boot/spring-boot-soap-webservice-example/ 

<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
		</dependency> 
		
		<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<schemaDirectory>src/main/resources</schemaDirectory>
					<outputDirectory>src/main/java</outputDirectory>
					<clearOutputDir>false</clearOutputDir>
				</configuration>
			</plugin>
		</plugins>
	</build> 
	
	
	<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>jaxb2-maven-plugin</artifactId>
    <version>1.6</version>
    <executions>
        <execution>
            <id>xjc</id>
            <goals>
                <goal>xjc</goal>
            </goals>
        </execution>
    </executions>
    <configuration>
        <schemaDirectory>${project.basedir}/src/main/resources/</schemaDirectory>
        <outputDirectory>${project.basedir}/src/main/java</outputDirectory>
        <clearOutputDir>false</clearOutputDir>
    </configuration>
</plugin>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
		</dependency>
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency> 
-------------------------------------
create xsd file
add the plugins
clean and build
u ll find the pojo classes for the xsd


[‎2/‎12/‎2019 3:26 PM]  Sanagapalli, Anurag:  
<build>  
<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.jvnet.jaxb2.maven2</groupId>
				<artifactId>maven-jaxb2-plugin</artifactId>
				<version>0.14.0</version>
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<generatePackage>com.example.demo.bank.stargate</generatePackage>
					<outputDirectory>src/main/java</outputDirectory>
					<clearOutputDir>false</clearOutputDir>
					<schemas>
						<schema>
							<url>http://34.236.109.151:8000/ws/bankdetails.wsdl</url>
						</schema>
					</schemas>
				</configuration>
			</plugin>
		</plugins>

	</build> 
 
 
 [‎2/‎12/‎2019 4:35 PM]  Venkatasalam, Ramji:  
@GetMapping(value="/api/partys/{id}")
	public ResponseEntity<?> getPartyResponse(@PathVariable("id") String id)
	{
		GetPartyResponse response = partycc.getPartyById(id);
		Gson gson = new Gson();
		
		if(response.getPartyinfo()!=null)
		{
			
			return new ResponseEntity<String>(gson.toJson(response).toString(), HttpStatus.OK);
		}
	else
	{
		
		
		return new ResponseEntity<String>(gson.toJson(response).toString(),HttpStatus.NOT_FOUND);
	}
		
	}  
add lik this
===================================================================================================
13/02/2019
Actuators : used to monitor and manage the application (springboot version greater than 2)

actuator url : http://localhost:8082/actuator its like a monitoring tool to monitor our application deployed in AWS.


include this in .props file to expose all actuators .
management.endpoints.web.exposure.include=* 	
management.endpoint.health.show-details=always 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
==================================================================================
H2 Database

		<dependency>
 			<groupId>com.h2database</groupId>
 			<artifactId>h2</artifactId>
 		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>
		
app.propsspring.h2.console.enabled=true to enable console
http://localhost:8080/h2-console to view console

create the foll
schema.sql : DROP TABLE IF EXISTS snippet;CREATE TABLE snippet(id varchar(36) NOT NULL,title varchar(200) NOT NULL,code varchar(500) DEFAULT NULL,created date NOT NULL,modified date NOT NULL,PRIMARY KEY (id));
data.sql : insert into snippet(id,title,code,created,modified) values('66921076-ed1d-458b-9d7d-ce9a227d64a5','JavaScript: Hello World','console.log("Hello World!");','2016-07-31','2016-07-31');
==========================================================================
Mysql
		
spring.datasource.url=jdbc:mysql://localhost:3306/sakila
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create-->to create tables automatically or spring.datasource.initialization-mode=always
 Make sure to disable spring.jpa.hibernate.ddl-auto and spring.datasource.initialization-mode if you use schema.sql
=================================================================
mongoDb
			<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
		</dependency> 
spring.data.mongodb.database=admin
spring.data.mongodb.host=localhost
spring.data.mongodb.port=27017
spring.data.mongodb.uri=mongodb://localhost:27017/snippet  
==================================================================
To convert jar to war
	<groupId>com.example</groupId>
	<artifactId>MySqlDb</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>MySqlDb</name>
	<description>Demo project for Spring Boot</description>
	<packaging>war</packaging>
	
	@SpringBootApplication
public class Application extends SpringBootServletInitializer {

	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(Application.class);
	}

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}

}
=========================================================

6a1903b4-ebd7-4458-b90d-3409859dfa93

b202c187-2240-4563-a1e1-b9fbf4477a52
spring.security.user.name=username	
spring.security.user.password=alok1234 
denying specific endpoints
protected void configure(HttpSecurity http) throws Exception {
                  http.authorizeRequests()
                  .anyRequest().authenticated().and()
                  .formLogin().and().httpBasic();
} 

Customization of login page
protected void configure(HttpSecurity http) throws Exception {
                  http                             .authorizeRequests()
                                                       .anyRequest().authenticated()
                                                       .and().formLogin().loginPage("/login") 
                                           .permitAll();       


[‎2/‎14/‎2019 11:31 AM]  Rajagopal, Umashankari:  
No Title 
protected void configure(HttpSecurity http) throws Exception {
                  http
                                     .logout()                                                                
                                                       .logoutUrl("/my/logout")                                                 
                                                       .logoutSuccessUrl("/my/index")                                           
                                                       .logoutSuccessHandler(logoutSuccessHandler)                              
                                                       .invalidateHttpSession(true)                                             
                                                       .addLogoutHandler(logoutHandler)                                         
                                                       .deleteCookies(cookieNamesToClear)                                       
                                                       .and()
                                     ...
} 
 

==================================================================================================
15/2/2019
PCF

default port :8888
Config Server--
For server: 
spring.cloud.config.server.native.searchLocations=file:///C:/Users/ramjvenk/Desktop/App 
server.port=8888
spring.profiles.active=native 

in case of git :
spring.cloud.config.server.git.uri=https://github.com/vinot477/ConfigServer.git

For client: 
spring.cloud.config.uri=http://localhost:8888

management.endpoints.web.exposure.include=* 
==============================================================================
service registry : Eurekha server

client discovery 
eureka.client.serviceUrl.defaultZone=http://localhost:8761

Hyterix-->circuit breaker
@EnableCircuitBreaker in Main Class od SpringBoot

  @HystrixCommand(fallbackMethod = "reliable")
  public String readingList() {
    URI uri = URI.create("http://localhost:8087/recommended");

    return this.restTemplate.getForObject(uri, String.class);
  }

  public String reliable() {
    return "Cloud Native Java (O'Reilly)";
  }
===========================================================================
18/2/19

Sleuth--->Tracing
Enable looger for this
2019-02-18 11:27:07.470  INFO [Sleuth,d4a23e6ca26062c4,d4a23e6ca26062c4,false] 9604 --- [nio-8080-exec-3] com.example.demo.SleuthApplication       : Handling home

Trace--d4a23e6ca26062c4--one id for per request
span--d4a23e6ca26062c4--one span id per service
for egs-req-->s1-->s2-->s3...so span varies when it hits different services
=============================================================================================
Zuul-->proxy
Ceate a Rest service--port http://localhost:8090/getStudentDetails/Sajal


Create Zuul application
@SpringBootApplication
@EnableZuulProxy
public class SpringBootZuulgatwayproxyApplication {
 
    public static void main(String[] args) {
        SpringApplication.run(SpringBootZuulgatwayproxyApplication.class, args);
    }
	---------------------------------------
provide the foll in .props
	#Zuul routes. Here for /student path, we are routing to localhost:8090 with extra path after that.
zuul.routes.student.url=http://localhost:8090
 
#Ribbon is auto integrated with Zuul and for this exercise we are not using that.
ribbon.eureka.enabled=false
 
#Will start the gateway server @8080
server.port=8080
------------------------------------------
spring.application.name=Sleuth
zuul.routes.rest.url=http://localhost:8087--->rest is application name provide as spring.application.name=rest in port 8087
#Ribbon is auto integrated with Zuul and for this exercise we are not using that.
ribbon.eureka.enabled=false
 
#Will start the gateway server @8080
server.port=8080

Now u will hit as http://localhost:8080/student/getStudentDetails/Sajal-->test whether the endpoints are working by accessing the student service bu it’s name i.e. /student.
===========================================================================
19/2/2019
PCF Intro..
to login from cmd : cf login -a api.run.pivotal.io

to delete app
cf delete VinothSoapUi
to set roles
cf set-org-role  (cf  set-org-role  huey@example.com  example-org  OrgManager)
cf unset-org-role
cf set-space-role 
cf unset-space-role

to increse instaces
cf push padma -i 2

to sacle the app
cf scale padma -i 2 -k 1G -m 1G -f
===============================================================================
20/2/2019
Restart : Restarts with same droplets
Restage : Restarts with new droplets

to create services
cf create-service cleardb(service name) spark(plan) mysqldb(name)
cf bind-service  appname servicename


Pape Cups (user provided services)
Logging app : https://papertrailapp.com/ (for user provided services)

cf cups my-logs -l syslog-tls://logs6.papertrailapp.com:42471

cf cups vmysqldb(service instance name) -p "host, username, password","database"

cf cups my-logs -l syslog-tls://logs6.papertrailapp.com:42471

logs6.papertrailapp.com:42471
cf cups VMYSQL -p "host, username, password","database"

DB_URL>jdbc:mysql://localhost:3306/sakila
DB_USERNAME>root 
DB_PASSWORD>1234
=======================================================================
21/2/2019
cf push pcfbuildpacks -p  C:\Users\learning\Documents\workspace-sts-3.9.1.RELEASE\vishu\pcf1_demo\target\pcf1_demo-0.0.1-SNAPSHOT.jar -b(buildpack)
https://github.com/cloudfoundry/java-buildpack 


cf push Vrest -b https://github.com/cloudfoundry/java-buildpack.git 
manifest.yml
---
# this manifest deploys two applications
# apps are in flame and spark directories
# flame and spark are in fireplace
# cf push should be run from fireplace
applications:
- name: spark
  memory: 1G
  instances: 2
  host: flint-99
  domain: shared-domain.example.com
  path: ./spark/
  services:
  - mysql-flint-99
- name: flame
  memory: 1G
  instances: 2
  host: burnin-77
  domain: shared-domain.example.com
  path: ./flame/
  services:
  - redis-burnin-77
  
  
Security groups 
cf security-groups

cf staging-security-groups(durring buildpack)
cf running-security-groups(durring app running)
==================================================================
Blue green deployment

At any time, only one of the environments is live, 
with the live environment serving all production traffic. 
For this example, Blue is currently live and Green is idle.

As you prepare a new version of your software, 
deployment and the final stage of testing takes place in the environment that is not live:
in this example, Green. Once you have deployed and fully tested the software in Green, 
you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.

to map the app
cf map-route APP_NAME DOMAIN [--hostname HOSTNAME] [--path PATH]

EXAMPLES:
   cf map-route my-app example.com                              # example.com
   cf map-route my-app example.com --hostname myhost            # myhost.example.com
   cf map-route my-app example.com --hostname myhost --path foo # myhost.example.com/foo

OPTIONS:
   --hostname, -n      Hostname for the route (required for shared domains)
   --path              Path for the route
cf map-route APP_NAME DOMAIN [--hostname HOSTNAME]
cf map-route vblue cfapps.io -n vblue or cf map-route vblue cfapps.io --hostname vblue 
==============================================================================================
#spring.cloud.config.uri=http://localhost:8888

cf create-service p-config-server trial MyConfigServer -c '{"git": {"uri": "https://github.com/vinot477/ConfigServer.git"} }'
https://github.com/vinot477/ConfigServer.git
"password": "****",
    "skipSslValidation": true,
    "uri": "https://github.com/nagar",
    "username": "" 

"git": {
    "password": "Appu@477jan",
    "skipSslValidation": true,
    "uri": "https://github.com/nagaraju107443/configserver",
    "username": "username"
  } 

<dependency>

<groupId>org.springframework.cloud</groupId>

<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>

</dependency>


-<dependency>

<groupId>org.springframework.cloud</groupId>

<artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>

</dependency>


-<dependency>

<groupId>io.pivotal.spring.cloud</groupId>

<artifactId>spring-cloud-services-starter-circuit-breaker</artifactId>

</dependency>


-<dependency>

<groupId>io.pivotal.spring.cloud</groupId>

<artifactId>spring-cloud-services-starter-config-client</artifactId>

</dependency>


-<dependency>

<groupId>io.pivotal.spring.cloud</groupId>

<artifactId>spring-cloud-services-starter-service-registry</artifactId>

</dependency> 
========================================================
25/2/19
OpenBanking Project
https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937754701/Payment+Initiation+API+Specification+-+v3.1
https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937951380/Confirmation+of+Funds+API+Specification+-+v3.1
https://openbanking.atlassian.net/wiki/spaces/DZ/pages/937951397/Event+Notification+API+Specification+-+v3.1 


UC4

Raml Design : https://anypoint.mulesoft.com/designcenter/designer-amf/#/project/cc18d05d-b97d-43c5-8143-75d45c6e3a8d

CREATE table `user`(
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(32),
    pass VARCHAR(256)
);


@NotNull, @NotEmpty, and @NotBlank

@NotNull: must not be null & length can be 0, for egs : string a="";true
@NotEmpty:must not be null & length should be greater than 0, for egs : string a=""->false;string a=" "->true
@NotBlank:must not be null & length should be greater than 0 and charSequence.toString().trim().length() > 0, for egs : string a=" ";false so when u trim the value ,then value length should be greater than 1
to ignore security for post req
@Override
	public void configure(WebSecurity web) throws Exception {
		// web.ignoring().antMatchers(HttpMethod.POST);
	}
	
	http
        .csrf().disable()
        .authorizeRequests().antMatchers("/domestic-scheduled-payment-consents").hasRole("user");
		
		
		@RestControllerAdvice
public class ExceptionHandlerController implements AuthenticationEntryPoint{

		
	    @ExceptionHandler(NoHandlerFoundException.class)
	    @ResponseStatus(value= HttpStatus.NOT_FOUND)
	    @ResponseBody
	    public ApiError requestHandlingNoHandlerFound() {
	        return new ApiError(404, "Resource you have requested not found");
	    }
	    
	    @ExceptionHandler(CustomPaymentConsentException.class)
	    @ResponseBody
	    public ApiError handlePaymentConsentException(CustomPaymentConsentException exp, HttpServletResponse response) {
	    	 return new ApiError(406, exp.getMessage());
	    }
	    
	    @ExceptionHandler(HttpMediaTypeException.class)
	    @ResponseStatus(value= HttpStatus.UNSUPPORTED_MEDIA_TYPE)
	    @ResponseBody
	    public ApiError requestHandlingNoMediaFound() {
	        return new ApiError(415, "Please provide valid media type");
	    }
	    
		@Override
		@ExceptionHandler(AccessDeniedException.class)
		@ResponseStatus(value=HttpStatus.UNAUTHORIZED)
		@ResponseBody
		public void commence(HttpServletRequest request, HttpServletResponse response,
				AuthenticationException authException) throws IOException, ServletException {
			response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Please provide a valid username or password");
		}
		
} 
SELECT * FROM sakila.account;CREATE TABLE `account` (
  `identification` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `scheme_name` varchar(255) NOT NULL,
  PRIMARY KEY (`identification`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;

CREATE TABLE `consents` (
  `consent_id` int(11) NOT NULL,
  `amount` double DEFAULT NULL,
  `creation_date_time` datetime DEFAULT NULL,
  `currency` varchar(255) DEFAULT NULL,
  `payment_context_code` varchar(255) DEFAULT NULL,
  `permission` varchar(255) DEFAULT NULL,
  `reference` varchar(255) DEFAULT NULL,
  `requested_execution_date` datetime DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `status_update_date_time` datetime DEFAULT NULL,
  `unstructured` varchar(255) DEFAULT NULL,
  `creditor_id` varchar(255) DEFAULT NULL,
  `debtor_id` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`consent_id`),
  KEY `FK4qqv0a4yjb6oav01fq524gbfx` (`creditor_id`),
  KEY `FKg12cnn76prpwxpa11lu1sc48j` (`debtor_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;





server.port=8085
spring.datasource.url=jdbc:mysql://localhost:3306/sakila
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE

spring.application.name=PAYMNETS

@GetMapping(value = "/domestic-scheduled-payment-consents")
	@ResponseBody
	public ResponseEntity<Request> getPayment(@Valid @Pattern(regexp = "[0-9]+", message = "Id should be of digits only")@RequestParam("id")String id) throws CustomPaymentException {
		Integer consnetId=new Integer(id);
		Request response = paymentRepository.getPayment(consnetId);
		return new ResponseEntity<Request>(response, HttpStatus.OK);

	}
public Request getPayment(Integer id) throws CustomPaymentException{
		logger.info("*************Requesting for domestic Payments****************");
		Request response = new Request();
		Optional<Consents> respConsents= consentsRepository.findById(id);
		if(respConsents.isPresent()) {
		Consents consents =respConsents.get();
		Account creditAccount = consents.getCreditorAccount();
		Account debitAccount = consents.getDebtorAccount();
		RemittanceInformation remittanceInformation = new RemittanceInformation();
		InstructedAmount instructedAmount = new InstructedAmount();
		instructedAmount.setAmount(consents.getAmount());
		instructedAmount.setCurrency(consents.getCurrency());
		remittanceInformation.setReference(consents.getReference());
		remittanceInformation.setUnstructured(consents.getUnstructured());
		Initiation initiation = new Initiation();
		initiation.setRequestedExecutionDate(consents.getRequestedExecutionDate());
		initiation.setInstructedAmount(instructedAmount);
		initiation.setCreditorAccount(creditAccount);
		initiation.setDebtorAccount(debitAccount);
		initiation.setRemittanceInformation(remittanceInformation);
		Risk risk = new Risk();
		risk.setPaymentContextCode(consents.getPaymentContextCode());
		Data data = new Data();
		data.setConsentId(consents.getConsentId());
		data.setCreationDateTime(consents.getCreationDateTime());
		data.setPermission(consents.getPermission());
		data.setStatus(consents.getStatus());
		data.setStatusUpdateDateTime(consents.getStatusUpdateDateTime());
		data.setInitiation(initiation);
		response.setData(data);
		response.setRisk(risk);
		}
		else {
			
				throw new CustomPaymentException("Domestic payment info not available for id :"+id);
		}
		return response;
	}	
	
	
server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/payments
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.hibernate.ddl-auto=create

logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
	